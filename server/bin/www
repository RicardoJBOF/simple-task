#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
// Create websocket
const WebSocket = require('ws');
const wss = new WebSocket.Server({ server });

// Manage websocket
const jwt = require('jsonwebtoken');
const clients = {};
wss.on("connection", socket => {
  socket.onmessage = event => {
    const data = JSON.parse(event.data);
    const { type, message, token } = data;
    if (type === "connection") {
      const { token } = data;
      const id = jwt.verify(token, process.env.TOKEN_SECRET).id;
      console.log("The following user has connected:", id);
      clients[id] = socket;
    }
    if (type === "disconnection") {
      console.log("client disconneted");
      for (const client in clients) {
        if (clients[client] === socket) {
          console.log("The following user has disconnected:", client);
          delete clients[client];
        }
      }
    }
    if (type === "chat-message") {
      console.log(message);
      const { sender_id, receiver_id } = message;
      clients[sender_id].send(JSON.stringify("new-message"));
      if (clients[receiver_id]) {
        clients[receiver_id].send(JSON.stringify("new-message"));
      }
    }
  };
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => console.log(`CORS-enabled\nSimpleTask listening on port ${port}`));
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
